{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport type { NextRequest } from 'next/server'\n\nexport function middleware(request: NextRequest) {\n  const pathname = request.nextUrl.pathname\n  \n  // Public paths that don't require authentication\n  const publicPaths = ['/signin', '/signup', '/reset-password']\n  \n  // Check if the current path is public\n  const isPublicPath = publicPaths.some(path => pathname.startsWith(path))\n  \n  // Check for user session\n  const userCookie = request.cookies.get('user')\n  \n  // If user is not authenticated and trying to access protected route\n  if (!isPublicPath && !userCookie) {\n    return NextResponse.redirect(new URL('/signin', request.url))\n  }\n  \n  // If user is authenticated and trying to access auth pages\n  if (isPublicPath && userCookie) {\n    return NextResponse.redirect(new URL('/dashboard', request.url))\n  }\n  \n  return NextResponse.next()\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - public folder\n     */\n    '/((?!api|_next/static|_next/image|favicon.ico|.*\\\\..*|images).*)',\n  ],\n}"],"names":[],"mappings":";;;;AAAA;AAAA;;AAGO,SAAS,WAAW,OAAoB;IAC7C,MAAM,WAAW,QAAQ,OAAO,CAAC,QAAQ;IAEzC,iDAAiD;IACjD,MAAM,cAAc;QAAC;QAAW;QAAW;KAAkB;IAE7D,sCAAsC;IACtC,MAAM,eAAe,YAAY,IAAI,CAAC,CAAA,OAAQ,SAAS,UAAU,CAAC;IAElE,yBAAyB;IACzB,MAAM,aAAa,QAAQ,OAAO,CAAC,GAAG,CAAC;IAEvC,oEAAoE;IACpE,IAAI,CAAC,gBAAgB,CAAC,YAAY;QAChC,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,WAAW,QAAQ,GAAG;IAC7D;IAEA,2DAA2D;IAC3D,IAAI,gBAAgB,YAAY;QAC9B,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,QAAQ,GAAG;IAChE;IAEA,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;;KAOC,GACD;KACD;AACH"}},
    {"offset": {"line": 64, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}