{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/mj/aifrontier/main/web/app/api/exchange/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\n\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url)\n  const format = searchParams.get('format') || 'web'\n  const date = searchParams.get('date') || new Date().toISOString().split('T')[0]\n  const days = searchParams.get('days') || '14'\n\n  try {\n    const response = await fetch(`http://localhost:3008/api/exchange_db2api?format=${format}&date=${date}&days=${days}`, {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      cache: 'no-store'\n    })\n\n    if (!response.ok) {\n      throw new Error(`Exchange API responded with status: ${response.status}`)\n    }\n\n    const rawData = await response.json()\n    \n    // API 응답 형식 변환\n    if (rawData.success && rawData.data && rawData.data.length > 0) {\n      // days=1인 경우 단일 날짜 데이터, days>1인 경우 여러 날짜 데이터\n      const isSingleDay = rawData.data.length === 1\n      const latestData = rawData.data[0]\n      const previousData = !isSingleDay && rawData.data[1] ? rawData.data[1] : null\n      \n      const transformedData = {\n        date: latestData.date,\n        usd: latestData.USD,\n        eur: latestData.EUR,\n        cny: latestData.CNH,\n        jpy100: latestData.JPY100,\n        previousDate: previousData?.date,\n        previousUsd: previousData?.USD,\n        previousEur: previousData?.EUR,\n        previousCny: previousData?.CNH,\n        previousJpy100: previousData?.JPY100,\n        history: isSingleDay ? [] : rawData.data.reverse().map((item: any) => ({\n          date: item.date,\n          usd: item.USD,\n          eur: item.EUR,\n          cny: item.CNH,\n          jpy100: item.JPY100\n        }))\n      }\n      \n      return NextResponse.json(transformedData)\n    }\n    \n    return NextResponse.json(rawData)\n  } catch (error) {\n    console.error('Failed to fetch exchange data:', error)\n    return NextResponse.json(\n      { error: 'Failed to fetch exchange data' },\n      { status: 500 }\n    )\n  }\n}"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,IAAI,OAAgB;IACxC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,MAAM,SAAS,aAAa,GAAG,CAAC,aAAa;IAC7C,MAAM,OAAO,aAAa,GAAG,CAAC,WAAW,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;IAC/E,MAAM,OAAO,aAAa,GAAG,CAAC,WAAW;IAEzC,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,CAAC,iDAAiD,EAAE,OAAO,MAAM,EAAE,KAAK,MAAM,EAAE,MAAM,EAAE;YACnH,SAAS;gBACP,gBAAgB;YAClB;YACA,OAAO;QACT;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM,CAAC,oCAAoC,EAAE,SAAS,MAAM,EAAE;QAC1E;QAEA,MAAM,UAAU,MAAM,SAAS,IAAI;QAEnC,eAAe;QACf,IAAI,QAAQ,OAAO,IAAI,QAAQ,IAAI,IAAI,QAAQ,IAAI,CAAC,MAAM,GAAG,GAAG;YAC9D,6CAA6C;YAC7C,MAAM,cAAc,QAAQ,IAAI,CAAC,MAAM,KAAK;YAC5C,MAAM,aAAa,QAAQ,IAAI,CAAC,EAAE;YAClC,MAAM,eAAe,CAAC,eAAe,QAAQ,IAAI,CAAC,EAAE,GAAG,QAAQ,IAAI,CAAC,EAAE,GAAG;YAEzE,MAAM,kBAAkB;gBACtB,MAAM,WAAW,IAAI;gBACrB,KAAK,WAAW,GAAG;gBACnB,KAAK,WAAW,GAAG;gBACnB,KAAK,WAAW,GAAG;gBACnB,QAAQ,WAAW,MAAM;gBACzB,cAAc,cAAc;gBAC5B,aAAa,cAAc;gBAC3B,aAAa,cAAc;gBAC3B,aAAa,cAAc;gBAC3B,gBAAgB,cAAc;gBAC9B,SAAS,cAAc,EAAE,GAAG,QAAQ,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,CAAC,OAAc,CAAC;wBACrE,MAAM,KAAK,IAAI;wBACf,KAAK,KAAK,GAAG;wBACb,KAAK,KAAK,GAAG;wBACb,KAAK,KAAK,GAAG;wBACb,QAAQ,KAAK,MAAM;oBACrB,CAAC;YACH;YAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAC3B;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAgC,GACzC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 113, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}