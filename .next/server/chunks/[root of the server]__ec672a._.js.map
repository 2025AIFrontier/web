{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/mj/aifrontier/main/web/app/api/auth/login/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\nimport { cookies } from 'next/headers'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json()\n    const { id, pw } = body\n    \n    // PostgREST API를 통해 사용자 검증\n    const response = await fetch(`http://localhost:3010/users?id=eq.${id}`, {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n      }\n    })\n    \n    if (!response.ok) {\n      return NextResponse.json(\n        { error: 'Database error' },\n        { status: 500 }\n      )\n    }\n    \n    const users = await response.json()\n    \n    // 사용자가 없거나 비밀번호가 틀린 경우\n    if (users.length === 0 || users[0].pw !== pw) {\n      return NextResponse.json(\n        { error: 'Invalid ID or password' },\n        { status: 401 }\n      )\n    }\n    \n    const user = users[0]\n    \n    // 세션 생성\n    const sessionData = {\n      userId: user.id,\n      loginTime: new Date().toISOString()\n    }\n    \n    // 쿠키에 세션 저장\n    const cookieStore = await cookies()\n    cookieStore.set('session', JSON.stringify(sessionData), {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'lax',\n      maxAge: 60 * 60 * 24 * 7 // 7일\n    })\n    \n    return NextResponse.json({\n      success: true,\n      user: {\n        id: user.id\n      }\n    })\n  } catch (error) {\n    console.error('Login error:', error)\n    return NextResponse.json(\n      { error: 'Server error' },\n      { status: 500 }\n    )\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG;QAEnB,2BAA2B;QAC3B,MAAM,WAAW,MAAM,MAAM,CAAC,kCAAkC,EAAE,IAAI,EAAE;YACtE,QAAQ;YACR,SAAS;gBACP,UAAU;YACZ;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAiB,GAC1B;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,QAAQ,MAAM,SAAS,IAAI;QAEjC,uBAAuB;QACvB,IAAI,MAAM,MAAM,KAAK,KAAK,KAAK,CAAC,EAAE,CAAC,EAAE,KAAK,IAAI;YAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyB,GAClC;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,OAAO,KAAK,CAAC,EAAE;QAErB,QAAQ;QACR,MAAM,cAAc;YAClB,QAAQ,KAAK,EAAE;YACf,WAAW,IAAI,OAAO,WAAW;QACnC;QAEA,YAAY;QACZ,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;QAChC,YAAY,GAAG,CAAC,WAAW,KAAK,SAAS,CAAC,cAAc;YACtD,UAAU;YACV,QAAQ,oDAAyB;YACjC,UAAU;YACV,QAAQ,KAAK,KAAK,KAAK,EAAE,KAAK;QAChC;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;gBACJ,IAAI,KAAK,EAAE;YACb;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gBAAgB;QAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAe,GACxB;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}