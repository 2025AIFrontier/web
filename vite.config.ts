import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';
import viteCompression from 'vite-plugin-compression';
import { execSync } from 'child_process';

// DBÏóêÏÑú Î™®Îì† ÌôòÍ≤ΩÎ≥ÄÏàò ÏßÅÏ†ë Î°úÎìú
function loadAllConfigFromDB() {
  console.log('üîß Loading ALL configuration from database...');
  
  const result = execSync(
    'curl -s "http://localhost:3010/env_configs" -H "Accept: application/json"',
    { encoding: 'utf8', timeout: 10000 }
  );
  
  const configs = JSON.parse(result);
  if (!configs || configs.length === 0) {
    console.error('‚ùå No configuration found in database');
    process.exit(1);
  }
  
  const allConfig = {
    services: {},
    exchange: {},
    api: {},
    database: {},
    environment: {}
  };
  
  // DBÏùò Î™®Îì† Îç∞Ïù¥ÌÑ∞Î•º ÏÑπÏÖòÎ≥ÑÎ°ú Ï†ïÎ¶¨
  configs.forEach(item => {
    const section = item.section;
    const subsection = item.subsection;
    const key = item.key;
    const value = item.value;
    
    if (!allConfig[section]) {
      allConfig[section] = {};
    }
    
    if (subsection) {
      if (!allConfig[section][subsection]) {
        allConfig[section][subsection] = {};
      }
      allConfig[section][subsection][key] = value;
    } else {
      allConfig[section][key] = value;
    }
  });
  
  console.log('‚úÖ ALL configuration loaded from database:', Object.keys(allConfig));
  return allConfig;
}

const config = loadAllConfigFromDB();

export default defineConfig({
  server: {
    host: config.services['main-web'].host,
    port: parseInt(config.services['main-web'].port),
    allowedHosts: ['localhost', '10.252.92.75', 'aipc.sec.samsung.net'],
    hmr: {
      host: '127.0.0.1',
      port: 24678,
      clientPort: parseInt(config.services['main-web'].port)
    },
    proxy: {
      '/postgrest': {
        target: `http://${config.services['postgrest-api'].host}:${config.services['postgrest-api'].port}`,
        changeOrigin: true,
        rewrite: (path) => path.replace(/^\/postgrest/, '')
      }
    }
  },
  plugins: [
    react(),
    viteCompression({
      algorithm: 'brotliCompress',
      ext: '.br',
      threshold: 1024,
      deleteOriginFile: false
    }),
    // Keep-Alive ÌîåÎü¨Í∑∏Ïù∏ - nginx proxy_read_timeout Î∞©ÏßÄ
    {
      name: 'nginx-keepalive',
      configureServer(server) {
        server.middlewares.use('/__keepalive', (req, res) => {
          res.writeHead(200, {
            'Content-Type': 'text/plain',
            'Cache-Control': 'no-cache',
          });
          res.end('alive');
        });
        
        // 30Ï¥àÎßàÎã§ ÏûêÎèôÏúºÎ°ú heartbeat (ÏÑ†ÌÉùÏÇ¨Ìï≠)
        // setInterval(() => {
        //   console.log('üíì Keep-Alive heartbeat');
        // }, 30000);
      }
    }
  ],
  
  // ÌôòÍ≤ΩÎ≥ÄÏàò Ï†ïÏùò (ÎπåÎìú Ïãú ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÏÑú ÏÇ¨Ïö© Í∞ÄÎä•) - Î™®Îì† ÏÑ§Ï†ï Ìè¨Ìï®
  define: {
    __APP_CONFIG__: JSON.stringify({
      // Î™®Îì† ÏÑúÎπÑÏä§ Ï†ïÎ≥¥
      services: config.services,
      // Exchange API Ï†ÑÏö© ÏÑ§Ï†ï
      exchange: config.exchange || {},
      // API ÏÑ§Ï†ï - nginx ÌîÑÎ°ùÏãúÎ•º ÌÜµÌïú Ï†ëÍ∑º
      api: {
        baseUrl: `http://${config.services.nginx.host}:${config.services.nginx.port}`,
        timeout: '30000',
        // Î™®Îì† API ÏÑúÎπÑÏä§Îì§Ïùò Ï†ïÎ≥¥Î•º Îß§Ìïë
        services: Object.keys(config.services)
          .filter(key => key.includes('-api'))
          .reduce((acc, serviceName) => {
            const service = config.services[serviceName];
            acc[serviceName] = {
              host: service.host,
              port: service.port,
              protocol: service.protocol,
              url: `${service.protocol}://${service.host}:${service.port}`
            };
            return acc;
          }, {})
      },
      // ÌôòÍ≤Ω ÏÑ§Ï†ï
      environment: config.environment || { nodeEnv: 'development' },
      // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÑ§Ï†ï
      database: config.database || {}
    })
  }
});
